@startuml GeoDine-AI Sequence Diagram

actor User
participant "LINE App" as LINE
participant "LINE Bot\n(line_bot.py)" as Bot
participant "Restaurant Finder\n(restaurant_finder.py)" as Finder
participant "Utils\n(utils.py)" as Utils
participant "Translation\n(translation.py)" as Translation
participant "Security\n(security.py)" as Security
participant "OpenAI API" as OpenAI
participant "Google Maps API" as Google

== Text Message Flow ==
User -> LINE: Send text message\n(e.g., "Find Japanese food near Central Park")
LINE -> Bot: Webhook event (MessageEvent with TextMessage)
activate Bot

Bot -> Security: verify_line_signature(x_line_signature)
activate Security
Security --> Bot: signature verified
deactivate Security

Bot -> Translation: detect_language(text)
activate Translation
Translation -> OpenAI: Request language detection
activate OpenAI
OpenAI --> Translation: Language code
deactivate OpenAI
Translation --> Bot: detected_language
deactivate Translation

alt USE_AI_PARSING is true
    Bot -> Utils: parse_user_request_with_ai(text)
    activate Utils
    
    Utils -> OpenAI: Request text analysis\n(GPT-4o model)
    activate OpenAI
    OpenAI --> Utils: Structured JSON response\n(cuisine, location, price, etc.)
    deactivate OpenAI
    
    Utils --> Bot: query_params
    deactivate Utils
else USE_AI_PARSING is false
    Bot -> Utils: parse_user_request(text)
    activate Utils
    Utils --> Bot: query_params
    deactivate Utils
end

alt location not found in query_params
    Bot -> Translation: translate_text(message, language)
    activate Translation
    Translation -> OpenAI: Request translation
    activate OpenAI
    OpenAI --> Translation: Translated message
    deactivate OpenAI
    Translation --> Bot: translated_message
    deactivate Translation
    
    Bot -> LINE: translated_message
    LINE -> User: Location request
else location found in query_params
    Bot -> Security: verify_api_key(api_key)
    activate Security
    Security --> Bot: api_key verified
    deactivate Security
    
    Bot -> Finder: search_restaurants(query_params)
    activate Finder
    
    Finder -> Google: places_nearby API request
    activate Google
    Google --> Finder: places result
    deactivate Google
    
    Finder --> Bot: restaurant results
    deactivate Finder
    
    Bot -> Bot: create_restaurant_flex_message(results)
    Bot -> LINE: FlexSendMessage with restaurant data
    LINE -> User: Restaurant recommendations carousel
end
deactivate Bot

== Location Message Flow ==
User -> LINE: Share location
LINE -> Bot: Webhook event (MessageEvent with LocationMessage)
activate Bot

Bot -> Security: verify_line_signature(x_line_signature)
activate Security
Security --> Bot: signature verified
deactivate Security

Bot -> Bot: Extract latitude/longitude
Bot -> Security: verify_api_key(api_key)
activate Security
Security --> Bot: api_key verified
deactivate Security

Bot -> Finder: search_restaurants(location, radius, type)
activate Finder

Finder -> Google: places_nearby API request
activate Google
Google --> Finder: places result
deactivate Google

Finder --> Bot: restaurant results
deactivate Finder

Bot -> Bot: create_restaurant_flex_message(results)
Bot -> LINE: FlexSendMessage with nearby restaurants
LINE -> User: Nearby restaurants carousel
deactivate Bot

@enduml
